

struct Ray
{
    vec3 origin;
    vec3 dir;
};

uniform sampler3D tex;
uniform vec3 camPos;
uniform vec3 camDir;
uniform vec3 camUp;
uniform vec3 camRight;
uniform float time;

varying vec3 TexCoord;

vec4 color=vec4(0.0,0.0,0.0,1.0);

void main(void)
{	
  Ray ray;
  float step=0.05;
  float steps=100;
  ray.origin=TexCoord;
  //ray.dir=getRayDir()*step;
  ray.dir=normalize(TexCoord-camDir)*step;

  vec4 outputColor = vec4(0.0,0.0,0.0,1.0);
  vec4 isoColor= vec4(1.0,1.0,1.0,1.0);   
  float isoThr=0;

  float ambient=0.2;
  float k_diffuse=0.8;
  float diffuse=0;
  vec3 lightvector;
 
  while (steps>0)
  {
    steps--;
    // get trilinear interpolated value from 3d texture
    //vec4 value  = texture3D(tex, ray.origin);
    vec4 value  = texture3D(tex, TexCoord);
    //outputColor=texture3D(tex, ray.origin);
    //outputColor.a=0.5;
   
    if (value.a>0.04)
    {
	outputColor = isoColor;
        lightvector = normalize(camPos - TexCoord);
        diffuse = max(dot(normalize(TexCoord), -lightvector), 0.0);
	break;
    }
	TexCoord.z+=step;
        //TexCoord+=ray.dir;
	//ray.origin+=ray.dir;
  }

gl_FragColor = (1-diffuse)*outputColor;
}
