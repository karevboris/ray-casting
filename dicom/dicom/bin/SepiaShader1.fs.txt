
uniform sampler3D tex;
uniform vec3 camPos;
uniform vec3 camDir;
uniform vec3 camUp;
uniform vec3 camRight;
uniform float time;

varying vec3 TexCoord;

vec4 color=vec4(0.0,0.0,0.0,1.0);

#define K_A 0.1
#define K_D 1.0
#define K_S 0.3
#define P 32.0
#define LightDir vec3(1,0,0)

vec3 Phong ( vec3 point, vec3 normal, vec3 color)
{
//	vec3 LightDir = -normalize(point-camPos);
	float diffuse = dot ( camDir, normal )*0.5+0.5;
	vec3 reflect = reflect ( -camDir, normal );
	float specular = pow ( max (0.0, dot ( reflect, normalize(camPos-point) ) ), P );
	return K_A * color + diffuse * ( K_D * color + K_S * specular * vec3(1.0) );
}

float Equ(in vec3 arg)
{
	return texture3D(tex, arg).a;
}

vec3 GradEqu1(in vec3 arg, in float e)
{
	vec3 res;
	res.x = Equ(vec3(arg.x+1,arg.y,arg.z))-e;
	res.y = Equ(vec3(arg.x,arg.y+1,arg.z))-e;
	res.z = Equ(vec3(arg.x,arg.y,arg.z+1))-e;
	return res;
}

struct Ray
{
    vec3 origin;
    vec3 dir;
};

void main(void)
{	
  Ray ray;
  float step=0.05;
  float steps=100;
  ray.origin=TexCoord;
  //ray.dir=getRayDir()*step;
  ray.dir=normalize(TexCoord-camDir)*step;

  vec4 outputColor = vec4(0.0,0.0,0.0,1.0);
  vec4 isoColor= vec4(1.0,1.0,1.0,1.0);   
  float isoThr=0;

  float ambient=0.2;
  float k_diffuse=0.8;
  float diffuse=0;
  vec3 lightvector;

  //float e0, e = Equ(ps.xyz-step.xyz);
  //vec3 norm = (GradEqu1(TexCoord.xyz-step.xyz,e)+vec3(0.000001));
 
  while (steps>0)
  {
    steps--;
    // get trilinear interpolated value from 3d texture
    //vec4 value  = texture3D(tex, ray.origin);
    vec4 value  = texture3D(tex, TexCoord);
    //outputColor=texture3D(tex, ray.origin);
    //outputColor.a=0.5;
    
   
    if (value.a>0.001)
    {
	outputColor = isoColor;

	

        lightvector = normalize(camPos - TexCoord);
        diffuse = max(dot(normalize(TexCoord), -lightvector), 0.0);
	break;
    }
	TexCoord.z+=step;
        //TexCoord+=ray.dir;
	//ray.origin+=ray.dir;
  }

gl_FragColor = (1-diffuse)*outputColor;
//gl_FragColor = Phong(TexCoord.xyz,-normalize(mix(norm0,norm,jj)),cl.xyz)*outputColor;
}
