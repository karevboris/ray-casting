

struct Ray
{
    vec3 origin;
    vec3 dir;
};

uniform sampler3D tex;
uniform vec3 camPos;
uniform vec3 camDir;
uniform vec3 camUp;
uniform vec3 camRight;
uniform float time;

varying vec2 TexCoord;

vec4 color=vec4(0.0,0.0,0.0,1.0);

vec3 getRayDir()
{
	vec3 tmp=2*camDir+2*(TexCoord.x-0.5)*camRight+2*(TexCoord.y-0.5)*camUp;	
	return normalize(tmp);
}

varying vec4 texCoord0;

void main(void)
{	
  floast steps = 1.0 / 100;
  vec4 outputColor = vec4(0.,0.,0.,0.);    
  float isoThr=400;
 
  // get ray position and ray direction
  vec4 vPosition = gl_ModelViewMatrixInverse[3];
  vec3 rayPosition = texCoord0.xyz;
  vec3 vecDif = rayPosition - vPosition.xyz;
  vec3 rayDirection = sampleRate * normalize(vecDif);
 
  // for all samples along the ray
  while (steps)
  {
    steps--;
    // get trilinear interpolated value from 3d texture
    float value  = texture3D(volume, rayPosition);
    isoThr = value-isoValue;
   
    // check if we get isosurface line
    if (isoThr < 0)
    {
      // march to the next sample
      rayPosition = rayPosition + rayDirection;
       
      // get next density
      continue;
    }
   
    // else we do color transformation
    outputColor = isoColor;
    outputColor.rgb = outputColor.rgb * outputColor.a;
    break;
  }
  gl_FragColor.rgba = outputColor;
}
