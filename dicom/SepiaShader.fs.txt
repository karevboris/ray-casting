

struct Ray
{
    vec3 origin;
    vec3 dir;
};

struct Sphere
{
    vec3 center;
    float rad;
	vec4 color;
	float shininess;
	float diffuse;
	float reflection;
	float specular;
};

struct Light
{
	vec3 pos;
	float intensity;
	vec4 color;
};

uniform sampler3D tex;
uniform vec3 camPos;
uniform vec3 camDir;
uniform vec3 camUp;
uniform vec3 camRight;
uniform float time;

varying vec2 TexCoord;


Sphere sphere1,sphere2; //1 - красная, 2 - зелёная
Light light1,light2,light3;
vec4 color=vec4(0.0,0.0,0.0,1.0);
int objNum=0;


vec3 getRayDir()
{
	vec3 tmp=2*camDir+2*(TexCoord.x-0.5)*camRight+2*(TexCoord.y-0.5)*camUp;	
	return normalize(tmp);
}


/*bool sphereIntersect1(in Sphere sp, in Ray ray, out float t)
{ 
	float a,b,c,disc,t1,t2;
	a=length(sp.center)*length(sp.center);
	b=2*dot((ray.origin-sp.center),ray.dir);
	c=length(ray.origin-sp.center)*length(ray.origin-sp.center)-sp.rad*sp.rad;
	disc=b*b-4*c;
	if ((disc==0)&&(b<=0)) {t=-b/(2); return true;}
	if (disc<0) {t=-1.0; return false;}
	if (disc>0)
	{
		t1=(-b+sqrt(disc))/(2);
		t2=(-b-sqrt(disc))/(2);
		t=t1;
		if (t2>=0)
		{
			if (t<0) t=t2;
			else if (t2<=t1) t=t2;
		}
		if (t<0) {t=-1.0; return false;}
		else return true;
	}
	t=-1.0;
	return false;
}


void castPrimRay(in Ray ray, out float tnear)
{
	float tsp1,tsp2;
	tnear=-1.0;
	sphereIntersect1(sphere1,ray,tsp1);
	sphereIntersect1(sphere2,ray,tsp2);	
	if ((tsp1>=0) && (tsp2>=0))
	{
		if (tsp1<tsp2) {tnear=tsp1; color=(1-sphere1.specular)*sphere1.color; objNum=1;} 
		else {tnear=tsp2; color=sphere2.color; objNum=2;}
	}
	else
	{
		if (tsp1>=0) {tnear=tsp1; color=(1-sphere1.specular)*sphere1.color; objNum=1;} 
		else if (tsp2>=0) {tnear=tsp2; color=sphere2.color; objNum=2;}
		else {tnear=-1.0; color=vec4(0.0,0.0,0.0,1.0); objNum=0;}
	}
}


void castShadRay(in Ray ray, in Light light, inout vec4 col)
{
	float tsp1,tsp2;
	ray.dir=normalize(light.pos-ray.origin);
	ray.origin=ray.origin+0.01*ray.dir;
	sphereIntersect1(sphere1,ray,tsp1);
	sphereIntersect1(sphere2,ray,tsp2);
	if (objNum==1)
	{
		if ((tsp1<=0)&&(tsp2<=0))
		{ 
			col+=(1-sphere1.specular)*light.color*light.intensity*sphere1.diffuse*dot(normalize(ray.origin-light.pos),normalize(sphere1.center-ray.origin)); 
			col+=light.color*light.intensity*sphere1.reflection*
				pow(abs(2*dot(normalize(sphere1.center-ray.origin),normalize(ray.origin-light.pos))*dot(normalize(sphere1.center-ray.origin),normalize(ray.origin-camPos))-dot(normalize(ray.origin-light.pos),normalize(ray.origin-camPos))),sphere1.shininess);
		}
	}
	if (objNum==2)
	{
		if ((tsp1<=0)&&(tsp2<=0))
		{
			col+=light.color*light.intensity*sphere2.diffuse*dot(normalize(ray.origin-light.pos),normalize(sphere2.center-ray.origin)); 
			col+=light.color*light.intensity*sphere2.reflection*
				pow(abs(2*dot(normalize(sphere2.center-ray.origin),normalize(ray.origin-light.pos))*dot(normalize(sphere2.center-ray.origin),normalize(ray.origin-camPos))-dot(normalize(ray.origin-light.pos),normalize(ray.origin-camPos))),sphere2.shininess);
			/*col+= pow(max(dot(reflect(normalize(ray.origin-light.pos),normalize(ray.origin-sphere2.center)), normalize(camPos-ray.origin)), 0.0), sphere2.shininess)			
			* light.intensity
			* light.color;
			col+=sphere2.diffuse * max(0.0,dot(ray.dir,normalize(ray.origin-sphere2.center))) * light.intensity * light.color;
			*/
		}
	}
	ray.origin=ray.origin-0.01*ray.dir;
}


void castSp1ReflectRay(in Ray ray)
{
	Ray r;
	r.origin=ray.origin;
	r.dir=normalize(reflect(normalize(ray.origin-camPos),normalize(ray.origin-sphere1.center)));
	float tmp;
	if (sphereIntersect1(sphere2,r,tmp))
	{
		vec4 reflcolor=vec4(0.0,0.0,0.0,1.0);
		r.origin=r.origin+tmp*r.dir;
		objNum=2;
		castShadRay(r, light1, reflcolor);
		castShadRay(r, light2, reflcolor);
		castShadRay(r, light3, reflcolor);
		color+=sphere1.specular*(sphere2.color+reflcolor);
	}
}
*/

void main(void)
{	
	Ray ray;
	
	/*light1.pos=vec3(0.0,0.8,1.0);
	light1.intensity=0.6;
	light1.color=vec4(0.5,0.5,0.5,1.0);
	
	light2.pos=vec3(3.0,-2.0,2.0);
	light2.intensity=0.6;
	light2.color=vec4(0.5,0.5,0.5,1.0);
	
	light3.pos=vec3(0.0,0.0,0.0);
	light3.intensity=0.1;
	light3.color=vec4(0.5,0.5,0.5,1.0);*/
	
	/*sphere1.center=vec3(2.0,0.0,0.0);
	sphere1.rad=0.4;
	sphere1.color=vec4(0.3,0.0,0.0,1.0);
	sphere1.shininess=80.0;
	sphere1.diffuse=0.7;
	sphere1.reflection=4.0;
	sphere1.specular=0.6;
	
	//sphere2.center=vec3(0.6,-0.4,0.4);
	sphere2.center=vec3(2.0+sin(time),cos(time),0.4);
	sphere2.rad=0.3;
	sphere2.color=vec4(0.0,0.3,0.0,1.0);
	sphere2.shininess=80.0;
	sphere2.diffuse=0.7;
	sphere2.reflection=1.5;
	sphere2.specular=0.0;*/
	
	ray.origin=camPos;
	ray.dir=getRayDir();	
	castPrimRay(ray, tnear);
	
	/*if (tnear>=0)
	{
		ray.origin=ray.origin+tnear*ray.dir;
		castShadRay(ray, light1, color);
		castShadRay(ray, light2, color);
		castShadRay(ray, light3, color);
		if (objNum==1) castSp1ReflectRay(ray);
	}*/
	
	gl_FragColor=color;
}
