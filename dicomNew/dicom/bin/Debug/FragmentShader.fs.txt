
uniform sampler3D tex;
uniform sampler1D pallete;
uniform vec3 camPos;
uniform vec3 camDir;
uniform vec3 camUp;
uniform vec3 camRight;
uniform float time;
uniform float min_level, max_level;
uniform int heigth, weigth, dep;

varying vec3 Vertex, Normal;

#define K_A 0.1
#define K_D 1.0
#define K_S 0.3
#define P 32.0
#define LightDir vec3(1,0,0)
#define global_opacity 1024.0

const vec3 level_color1 = vec3(0.6);	
const vec3 level_color2 = vec3(0.7,0.55,0.55);	

vec3 Phong ( vec3 point, vec3 normal, vec3 color)
{
	float diffuse = dot ( camDir, normal )*0.5+0.5;
	vec3 reflect = reflect ( -camDir, normal );
	float specular = pow ( max (0.0, dot ( reflect, normalize(camPos-point) ) ), P );
	return K_A * color + diffuse * ( K_D * color + K_S * specular * vec3(1.0) );
}

float interpolate_cubic(sampler3D tex, vec3 coord,vec3 cell_size1)
{
	vec3 coord_grid = coord/cell_size1-vec3(0.5);
	vec3 index = floor(coord_grid);
	vec3 fraction = coord_grid - index;
	vec3 one_frac = vec3(1.0) - fraction;
	vec3 one_frac2 = one_frac * one_frac;
	vec3 fraction2 = fraction * fraction;

	vec3 w0 = 1.0/6.0 * one_frac2 * one_frac;
	vec3 w1 = vec3(2.0/3.0) - 0.5 * fraction2 * (2.0-fraction);
	vec3 w2 = vec3(2.0/3.0) - 0.5 * one_frac2 * (2.0-one_frac);
	vec3 w3 = 1.0/6.0 * fraction2 * fraction;
	vec3 g0 = w0 + w1;
	vec3 g1 = w2 + w3;
	vec3 h0 = (w1 / g0) - vec3(0.5) + index;
	vec3 h1 = (w3 / g1) + vec3(1.5) + index;
	h0*=cell_size1;
	h1*=cell_size1;
	
	float tex000 = texture3D(tex, h0).a;
	float tex100 = texture3D(tex, vec3(h1.x, h0.y,h0.z)).a;
	float tex010 = texture3D(tex, vec3(h0.x, h1.y,h0.z)).a;
	float tex110 = texture3D(tex, vec3(h1.x,h1.y,h0.z)).a;
	
	float tex001 = texture3D(tex, vec3(h0.x,h0.y,h1.z)).a;
	float tex101 = texture3D(tex, vec3(h1.x,h0.y,h1.z)).a;
	float tex011 = texture3D(tex, vec3(h0.x,h1.y,h1.z)).a;
	float tex111 = texture3D(tex, h1).a;
	
	tex000 = mix(tex001, tex000, g0.z);
	tex100 = mix(tex101, tex100, g0.z);
	tex010 = mix(tex011, tex010, g0.z);
	tex110 = mix(tex111, tex110, g0.z);

	
	tex000 = mix(tex010, tex000, g0.y);
	tex100 = mix(tex110, tex100, g0.y);
	
	return mix(tex100, tex000, g0.x);
}

float Equ(in vec3 arg)
{
	vec3 txt_box1=vec3(-128, -128, 0);
	vec3 txt_box2=vec3(128, 128, dep);
	
	return texture3D(tex, (arg-txt_box1)/(txt_box2-txt_box1)).a;
}

vec3 GradEqu(in vec3 arg, in vec3 cell_size, in float e)
{
	vec3 res;
	res.x = Equ(vec3(arg.x+cell_size.x,arg.y,arg.z))-e;
	res.y = Equ(vec3(arg.x,arg.y+cell_size.y,arg.z))-e;
	res.z = Equ(vec3(arg.x,arg.y,arg.z+cell_size.z))-e;
	return normalize(res/cell_size);
}

bool IntersectBox ( vec3 Origin,vec3 Direction, vec3 minimum, vec3 maximum, out float start, out float final )
{
	vec3 OMAX = ( minimum - Origin ) / Direction;
	vec3 OMIN = ( maximum - Origin ) / Direction;
	vec3 MAX = max ( OMAX, OMIN );
	vec3 MIN = min ( OMAX, OMIN );
	final = min ( MAX.x, min ( MAX.y, MAX.z ) );
	start = max ( max ( MIN.x, 0.0), max ( MIN.y, MIN.z ) );	
	return final > start;
} 

vec4 GetLevelColor(float lv) 
{
	float res_den = (lv-min_level)/(max_level-min_level);
	return vec4(res_den, res_den, res_den, res_den);
}

void main(void)
{
	#define DIV_NUM 4.0
	vec3 norm, ray = normalize(Vertex-camPos);
	float step_length=0.25;
	vec3 cell_size=vec3 (1.0, 1.0, 1.0);
	float ddd=step_length*global_opacity/DIV_NUM;
		
	vec4 step  = vec4(ray*step_length,step_length);
	vec4 ps = vec4(camPos,0.0);

	float e=0.0, e0=0.0, start,final;
	vec3 box1=vec3(-128, -128, 0);
	vec3 box2=vec3(128, 128, 100);
	vec3 norm0;
	vec4 cl=vec4(0.0);

	vec2 txt_coord = gl_FragCoord.xy/vec2(256, 256);
	vec4 color=vec4(0.0);
	vec4 dist_to_polygon = vec4(0.0, 0.0, 0.0, sqrt(Vertex.y*Vertex.y+sqrt(Vertex.x*Vertex.x+350*350)));
	
	IntersectBox (camPos,ray,box1,box2,start,final);
	//final = min(final,dist_to_polygon.w);
	//start = max(start,0.0);
	float op0 = floor(-e0+start/step_length)+1.0;
	ps = ps + step*op0;
	ps=vec4(Vertex.x, Vertex.y, 0, 0);
	final=200;
	
	e = Equ(ps.xyz);
	norm = (GradEqu(ps.xyz-step.xyz, cell_size, e)+vec3(0.000001));
	for (float itt = 0.0; ps.w<=final && itt < float ( 2000.0 ); itt+=1.0 )
	{
		e0 = e;
		e = Equ(ps.xyz);

		if(e>min_level || e0>min_level)
		if(GetLevelColor(e).w>0.00 || GetLevelColor(e0).w>0.00)
		{
			float d_alpha;
			
			norm0 = norm;
			norm = (GradEqu(ps.xyz, cell_size, e)+vec3(0.000001));

			for(float jj=0.5/DIV_NUM;jj<1.0;jj+=1.0/DIV_NUM)
			{
				float interp_e = mix(e0,e,jj);
				cl = GetLevelColor(interp_e);
				cl.xyz = Phong(ps.xyz,-normalize(mix(norm0,norm,jj)),cl.xyz);
				
				d_alpha = (1-color.w) * cl.w;
				color.xyz = color.xyz + d_alpha* cl.xyz;
				color.w = color.w + d_alpha;
			}
				
			if(color.w>0.98) break;
		}
			
		ps += step;
			
	}
		
	if(color.w>0.98)
	{
		color.w=1.0;
	}

	//gl_FragColor = color;
	gl_FragColor = vec4(0.7,0.55,0.55, 1.0);	;
}
